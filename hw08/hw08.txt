За основу взял проект сетевого хранилища, которое делали на втором курсе GeekBrains.

Из того, что сразу бросается в галаз, так это то, что похоже я очень любил испольовать "Магические числа", для реализации ветвления. Решение - вделить все необходимые параметры методов в константы.

Также на лицо классический случай хард кода - у меня захардкожены пути для файлого менеджеры, а именно прописаны пути для Мака. Решение - использовать, например System.getProperty("os.name") и от этого уже отталкиваться, прописывать пути в зависимости от ОС.

Также есть "Шифрокод", что действительно очень сильно бьет по читаймости кода - вернувшись к приложению спустя несколько месяцев, я не сразу понял за что овтечает переменная pwd, например. Решение - называть переменные полнными именами (pwd - presentWorkingDirectory, currentDir и тд) 

Касаймо ООП антипаттернов, думаю стоит отрефакторить, разбить на более мелкие классы с единственной ответственность класс javaFx - контроллера. В текущей реализации он делает все, что представляется как "Божественный объект" - запускает UI, устанваливает соединение с сервером, отправляет сообщения, выводит ошибки. Делаем отдельные калссы под каждый слчай, объединяем вызовы в контроллере. 

